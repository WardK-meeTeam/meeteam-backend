plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.wardk'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	// Spring milestone 저장소 추가
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Spring WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// RabbitMQ for WebSocket Message Broker
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	// webflux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// 마이크로미터 프로메테우스 구현 라이브러리
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'


	// auth0
	implementation 'com.auth0:java-jwt:4.4.0'

	// Spring retry -> 낙관적 락에 적용
	implementation 'org.springframework.retry:spring-retry'

	// Spring AOP
	implementation 'org.springframework:spring-aspects'


	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'


	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.h2database:h2'


	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"


	// datafacker
	implementation 'net.datafaker:datafaker:2.3.1' // 최신 2.x 사용 권장



	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'


	// p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'


	// Spring AI
	implementation 'org.springframework.ai:spring-ai-starter-model-openai' 

	// AWS S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.470'

	// test 롬복
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'


	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.ehcache:ehcache:3.10.8'   // 최신 버전


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:1.0.1"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

configurations {
	querydsl.extendsFrom compileClasspath
}

task compileQuerydsl(type: JavaCompile) {
	source = sourceSets.main.java
	classpath = configurations.querydsl
	options.annotationProcessorPath = configurations.annotationProcessor
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

compileQuerydsl.dependsOn clean

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 183627768832-5vn88r5f5b22v6ui0p7bq9gmg30op6st.apps.googleusercontent.com
            client-secret: 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
            scope:
              - openid
              - profile
              - email
            redirect-uri: "http://localhost:8080/login/oauth2/code/google"

          github:
            client-id: Ov23liar1yl2UuJWXwVu
            client-secret: 18c5adc05db22830b03f15f7cfbdbab58c83d8c3
            scope:
              - user:email
              - read:user
            redirect-uri: "http://localhost:8080/login/oauth2/code/github"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: sub
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
  datasource:
    url: jdbc:mysql://my-db:3306/meeteam?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver

  ai:
    retry:
      max-attempts: 3
      initial-interval: 1000  # 1초로 단축
      multiplier: 1.5         # 배수 축소
      max-interval: 5000      # 5초로 단축
      backoff:
        initial-interval: 500ms  # 초기 간격 단축
        max-interval: 3s         # 최대 간격 단축
    openai:
      base-url: https://api.openai.com
      api-key: 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
      # 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
      chat:
        options:
          model: gpt-4o-mini      # 더 빠른 모델로 변경
          temperature: 0.0
          max-tokens: 2048        # 토큰 수 절반으로 축소
          timeout: 30s            # 30초로 단축
          connect-timeout: 30s
          read-timeout: 30s       # 읽기 타임아웃 추가

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 500
    open-in-view: false
  sql:
    init:
      mode: always
  data:
    redis:
      host: redis
      port: 6379

jwt:
  secret-key: zcR9P80KqqLmF5hT8dQ7VzXwJJgNZp3qrTy4FcRNm8L9H2zBxPVwP7L8RcNF5G2Q3xAW9cK6d
  access-exp-time: 36000000 # 액세스 토큰 만료 시간 (밀리초 단위, 예: 1시간)
  refresh-exp-time: 604800000 # 리프레시 토큰 만료 시간

file:
  dir: /home/ubuntu/meeteam/upload


springdoc:
  swagger-ui:
    path: /docs/swagger


management:
  endpoints:
    web:
      exposure:
        include:
          - "*"
  endpoint:
    health:
      show-components: always

logging:
  config: classpath:logback-spring.xml
  level:
    root: info
    p6spy: off
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    com.wardk.meeteam_backend.global.loginRegister: DEBUG
    com.wardk.meeteam_backend.global.filter: DEBUG

decorator:
  datasource:
    p6spy:
      enable-logging: true


github:
  webhook:
    secret: 4f3c2b1a2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7g
  token: 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
  app:
    id: 1877977
    private-key-pem: |
      -----BEGIN PRIVATE KEY-----
      MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCi+JSyDvb3ULV3
      wuZBN4hA0SeUQMrgbREowiWioDYSArVdCihWS4LUmbmXZtiofjML0loHhvLuldWM
      w2rCLI8GXsKaIgzRqE2LwMZVA1buErcTkbtnaHMBGSusKVBUFnwcA2ILZSXP0mEU
      EW0Qskz3JtP8iW7QOEpXfp9XW8z4pNnDySXD4AmBseo5IeWhPPVgs28AQL4QUgEM
      s21G/ogIneU6lIU8ixuoVqvKC2xM4t5u07JsS8W165zuVbB0Tbd+zoXvrxX7Fngb
      AANpVxNfqv3kJYkJr/e8NmjebeW46/AXiR2dt3t1yifWLjS0I4nj8caq6U3Lp3Tj
      MH4syYVNAgMBAAECggEATY9shQlmM/GvS53wI12gdOiVo5LqesCth+5OJwWEdjHf
      yrXI2Lj7PN8kWo/R0O6usJOd0TNCbpXUmjdumZbHQsraZqyJ2UX2Eere+RqrxoYV
      pzSWMfKduQoXpMnMtxg0XMinYrDyu+Nt3DUm6OlSg9Vw0iE+Ic6IYveaMeM4u6RG
      nXAZ7957spYYrKGwacCeaENIUApEM1zJANhU3HjdkPfs/ds5CfrfA7mlAcJAm2iK
      BbyN1k3TaQcZ00SA4ce5CngfHqsoerJT5Wy0ScxZ9YdTRUvB58zjorLG+Y/PV5g9
      wLx3du13BF1WA0QJH/qFCOzFGfz5UuXNql+aQlN3KQKBgQDROcMv7Ddo092Dy3kX
      rpYny6+8xCX7++Y1ojHk6UX1qsC9XrlW/KHuSxJNdNNT71xg5m2GG7MqjztiFkl+
      8ZvoxfG8U9V50iVSNcTpiW1c/xsqyeYowAb3XjRm3xOPJ40K7rFADbYOgnUvQmdW
      QopMAnAZ+HWyEd0nboOU5me5JwKBgQDHZ5xISAkv8ePenebQUPd3tI0bFhTYuEXO
      W4H2PrbdPTvoCX1TZ44YgwA88tjVOojTdz17h3Fw4/zqiURRG6pyVYGWFyUL2jCr
      1OiuXYTsUc9lNkKqcLTGp1Ujf67We4I11XNaA3b2Defe0P1qG1q5HeJpORuDCbEV
      bZs5/ZkOawKBgQCKdTlQO3gnrR1InJyUKXtA9rBjsUKZ0Qd1stJl9GHRw6AtMcRh
      Zmoa8h84lvlK8HonvhX4y9fzcDoSHUGh+m38yxHAWZJKPeFo2CBplAKFqmTmGhpw
      GTQC+5qeAT5GXBwggflWtDwoufimv8D2+q3ewzZAWYY5w0yhTadSIG+/vQKBgF40
      sv7rGXwPOWqJCuzL874YDLoJOpwQotoVHVcq1dW8AjtjkFQBDn7CFTC2Qn6qgs30
      /ZUIri15aJmddCsleOc/QlOYZ6Yr1Oa5VZxbDltfYy4b7m77hEx97Zkxz3YBL8kj
      KLYUAPXKKAt6jN6+QaRHXBn+IuNLht/qwnUpPFA1AoGAfWTb2Pu0Zxe8HiDa1AMO
      fYfY9atf8TfOoIbB2fRZtWZthsGZApLgPefDd+RunKH4MTMEBfA5TRZHnJKYwo3k
      ZJZlad2YaRK0qPkAzBtJH08g/MykdJtfrkl+67+cQyMdVj/RVTTYgF8OzbmAUvCd
      aYoxyNlecofKU2kPrJeZGVM=
      -----END PRIVATE KEY-----
